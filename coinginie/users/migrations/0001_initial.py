# Generated by Django 3.2.10 on 2021-12-28 08:22

import coinginie.users.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import model_utils.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(max_length=255, null=True, verbose_name='Middle Name')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'Investors'), (2, 'Brokers')], default=3, verbose_name='User Account Type')),
                ('investor_id', models.CharField(blank=True, max_length=255, null=True)),
                ('consent', models.BooleanField(default=False, help_text="</br>By signing up you consent to our <a href='/privacy/'>privacy agreement</a> and <a href='/terms/'>terms of use</a>.")),
                ('is_verified', models.BooleanField(default=False)),
                ('profile_updated', models.BooleanField(default=False)),
                ('settings_updated', models.BooleanField(default=False)),
                ('payment_updated', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Account',
                'verbose_name_plural': 'User Accounts',
                'ordering': ['first_name', 'middle_name', 'last_name'],
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PrivacyPolicies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('cookies_and_tracking', models.BooleanField(default=True, help_text='This is a must have integration to enable us provide you with proper services and security. They do not create any security bridge for you and can only be used to login, signout and even ensure your sessions are still working. You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('google_ads', models.BooleanField(default=True, help_text='These is an advertising and devlivey network service, aimed solely to provide advert placements based on your browser informations. permiting this allows us provide you with adverts directly on our site. Be ensured that this does not constitute any security risk to you. You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('social_account_integration', models.BooleanField(default=True, help_text='Facebook, Instagram, Twitter, Google Plus, Linkedin, these providers are integrated into the website to ensure we have proper informations to provide for our social influence and lead generation. We do not share these information for any other purpose other than statistical analysis. You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('personal_information', models.BooleanField(default=True, help_text='These are personal informations we collect to provide quality and personalised services to you. They include (First Name, Last Name, Phone Number, Social Accounts, Addresses, Photo). You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('commercial_information', models.BooleanField(default=True, help_text='These are informations we collect for commercial purposes and are used for analysis as well as providing accurate data statistics of our services usage. You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('identifiers', models.BooleanField(default=True, help_text='These are informations we collect to prevent fraud, do analysis as well as utilize cloud services. They include Email address, device identifiers (User IDs, IP and Location). You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('internet_or_other_electronic_network_activity_information', models.BooleanField(default=True, help_text='These are informations we collect regarding the user interactions within the website. With this information we can provide cloud services such as Content Delivery Networks for static/asset and media files. You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('age_restriction', models.BooleanField(default=True, help_text='As a bid to ensure we do not share informations to individuals who are below legal age, we expect a concent to be taken, idemnifying us from any law suit involved with sharing certain or aiding a minor purchase goods and services without a concent from a legal guardian. You hereby consent to the use and transfer of your Personal Information to countries outside the European Union.')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='userprivacypolicy', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Privacy',
                'verbose_name_plural': 'Privacies',
                'ordering': ['-created'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Investor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')], max_length=50)),
                ('image', models.ImageField(blank=True, upload_to=coinginie.users.models.user_dp)),
                ('doc', models.FileField(blank=True, upload_to=coinginie.users.models.user_doc)),
                ('address', models.CharField(blank=True, max_length=500)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='eg: +18012345678', max_length=128, region=None)),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('country', django_countries.fields.CountryField(max_length=2, null=True)),
                ('can_withdraw', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='investor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Investor Profile',
                'verbose_name_plural': 'Investor Profiles',
                'ordering': ['-created'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Broker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('broker_id', models.CharField(blank=True, max_length=255)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')], max_length=50)),
                ('image', models.ImageField(blank=True, upload_to=coinginie.users.models.user_dp)),
                ('address', models.CharField(blank=True, max_length=500)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='eg: 08012345678', max_length=128, region=None, unique=True)),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('country', django_countries.fields.CountryField(max_length=2, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='broker', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Broker Profile',
                'verbose_name_plural': 'Broker Profiles',
                'ordering': ['-created'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AccountSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('account_name', models.CharField(blank=True, max_length=500)),
                ('account_number', models.CharField(blank=True, max_length=11, validators=[django.core.validators.RegexValidator(code='Invalid_input, Only Integers', message='Must Contain Numbers Only', regex='^[0-9]*$')])),
                ('swift_code', models.CharField(blank=True, max_length=11, validators=[django.core.validators.RegexValidator(code='Invalid_input, Only Integers', message='Must Contain Numbers Only', regex='^[0-9]*$')])),
                ('bank_name', models.CharField(blank=True, choices=[('', 'Select Bank'), ('Arvest Bank', 'Arvest Bank'), ('Ally Financial', 'Ally Financial'), ('American Express', 'American Express'), ('Amarillos National Bank', 'Amarillos National Bank'), ('Apple bank for Savings', 'Apple bank for Savings'), ('Bank of Hawaii', 'Bank of Hawaii'), ('Bank of Hope', 'Bank of Hope'), ('Bank United', 'Bank United'), ('BOA', 'Bank of America'), ('Bank United', 'Bank United'), ('Brown Brothers Harriman & Co', 'Brown Brothers Harriman & Co'), ('Barclays', 'Barclays'), ('BMO Harris Bank', 'BMO Harris Bank'), ('Bank OZK', 'Bank OZK'), ('BBVA Compass', 'BBVA Compass'), ('BNP Paribas', 'BNP Paribas'), ('BOK Financial Corporation', 'BOK Financial Corporation'), ('Cathay Bank', 'Cathay Bank'), ('Chartway Federal Credit Union', 'Chartway Federal Credit Union'), ('Capital One', 'Capital One'), ('Capital City Bank', 'Capital City Bank'), ('Chase Bank', 'Chase Bank'), ('Charles Schwab Corporation', 'Charles Schwab Corporation'), ('CG', 'CitiGroup'), ('Credit Suisse', 'Credit Suisse'), ('Comerica', 'Comerica'), ('CIT Group', 'CIT Group'), ('CapitalCity Bank', 'CapitalCity Bank'), ('Credit Union Page', 'Credit Union Page'), ('Citizens Federal Bank', 'Citizens Federal Bank'), ('Chemical Financial Corporation', 'Chemical Financial Corporation'), ('Discover Financial', 'Discover Finacial'), ('Deutsche Bank', 'Deutsche Bank'), ('Douglas County Bank & Trust', 'Douglas County Bank & Trust '), ('Dime Savings Bank of Williamsburgh', 'Dime Savings Bank of Williamsburgh'), ('East West Bank', 'East West Bank'), ('Flagster Bank', 'Flagster Bank'), ('First National of Nebraska', 'First National of Nebraska'), ('FirstBank Holding Co', 'FirstBank Holding Co'), ('First Capital Bank', 'First Capital Bank'), ('First Commercial Bank', 'First Commercial Bank'), ('First Federal Savings Bank of Indiana', 'First Federal Savings Bank of Indiana'), ('First Guaranty Bank of Florida', 'First Guaranty Bank of Florida'), ('First Line Direct', 'First Line Direct'), ('First USA Bank', 'First USA Bank'), ('Fifth Third Bank', 'Fifth Third Bank'), ('First Citizens BancShares', 'First Citizens BancShares'), ('Fulton Financial Corporation', 'Fulton Financial Corporation'), ('First Hawaiian Bank', 'First Hawaiian Bank'), ('First Horizon National Corporation', 'First Horizon National Corporation'), ('Frost Bank', 'Frost Bank'), ('First Midwest Bank', 'First Midwest Bank'), ('Goldman Sachs', 'Goldman Sachs'), ('Grandeur Financials', 'Grandeur Financials'), ('HSBC Bank USA', 'HSBC Bank USA'), ('Home BancShares Conway', 'Home BancShares Conway'), ('Huntington Bancshares', 'Huntington Bancshares'), ('Investors Bank', 'Investors Bank'), ('Íntercity State Bank', 'Íntercity State Bank'), ('KeyCorp', 'KeyCorp'), ('MB Financial', 'MB Financial'), ('Mizuho Financial Group', 'Mizuho Financial Group'), ('Midfirst Bank', 'Midfirst Bank'), ('M&T Bank', 'M&T Bank'), ('MUFG Union Bank ', 'MUFG Union Bank'), ('Morgan Stanley', 'Morgan Stanley'), ('Northern Trust', 'Northern Trust'), ('New  York Community Bank', 'New York Community Bank'), ('Old National Bank', 'Old National Bank'), ('Pacwest Bancorp', 'Pacwest Bancorp'), ('Pinnacle Financial Partners', 'Pinnacle Financial Partners'), ('PNC Financial Services', 'PNC Financial Services'), ('Raymond James Financial', 'Raymond James Financial'), ('RBC Bank', 'RBC Bank'), ('Region Financial Corporation', 'Region Financial Corporation'), ('Satander Bank', 'Satander Bank'), ('Synovus Columbus', 'Synovus Columbus'), ('Synchrony Financial', 'Synchrony Financial'), ('Sterling Bancorp', 'Sterling Bancorp'), ('Simmons Bank', 'Simmons Bank'), ('South State Bank', 'South State Bank'), ('Stifel St. Louise', 'Stifel St. Louise'), ('Suntrust Bank', 'Suntrust Bank'), ('TCF Financial Corporation', 'TCF Financial Corporation'), ('TD Bank', 'TD Bank'), ('The Bank of New York Mellon', 'The Bank of New York Mellon'), ('Texas Capital Bank', 'Texas Capital Bank'), ('UMB Financial Corporation', 'UMB Financial Corporation'), ('Utrecht-America', 'Utrecht-America'), ('United Bank', 'United Bank'), ('USAA', 'USAA'), ('U.S Bank', 'U.S Bank'), ('UBS', 'UBS'), ('Valley National Bank', 'Valley National Bank'), ('Washington Federal', 'Washington Federal'), ('Western Alliance Banorporation', 'Western Alliance Bancorporation'), ('Wintrust Financial', 'Wintrust Finacial'), ('Webster Bank', 'Webster Bank'), ('Wells Fargo', 'Wells Fargo'), ('Zions Bancorporation', 'Zions Bancorporation'), ('Other Bank', 'Other Bank')], default='', max_length=120)),
                ('routing_no', models.CharField(blank=True, help_text='must be the recipients 9 digits routing number', max_length=13, null=True, validators=[django.core.validators.RegexValidator(code='Invalid_input, Only Integers', message='Must Contain Numbers Only', regex='^[0-9]*$')], verbose_name='Recipient Routing Number')),
                ('bank_name_text', models.CharField(blank=True, max_length=120)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bank Account',
                'verbose_name_plural': 'Bank Accounts',
                'ordering': ['-created'],
                'managed': True,
            },
        ),
    ]
